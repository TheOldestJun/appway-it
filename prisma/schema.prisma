generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  password        String
  firstName       String?
  lastName        String?
  role            Role    @relation(fields: [roleId], references: [code])
  roleId          String
  ordersCreated   Order[] @relation("createdBy")
  ordersApproved  Order[] @relation("approvedBy")
  ordersOrdered   Order[] @relation("orderedBy")
  ordersReceived  Order[] @relation("receivedBy")
}

model Role {
  id    Int    @id @default(autoincrement())
  code  String @unique
  title String
  image String
  users User[]
}

model Product {
  id     String  @id @default(cuid())
  title  String  @unique
  orders Order[]
}

model Unit {
  id       String  @id @default(cuid())
  title    String    @unique
  orders   Order[]
}

model Order {
  id                String  @id @default(cuid())
  // product data  
  // status depends on [createdDate, approvedDate, orderedDate, receivedDate, closedDate]
  status            OrderStatus 
  product           Product  @relation(fields: [productId], references: [id])
  productId         String
  description       String?
  unit              Unit     @relation(fields: [unitId], references: [id])
  unitId            String
  quantityCreated   Float
  quantityOrdered   Float?
  quantityDelivered Float?
  // applicants data
  createdBy         User     @relation(name: "createdBy", fields: [creatorId], references: [id])
  creatorId         String
  createdDate       DateTime @default(now()) @db.Date
  closedDate        DateTime? @db.Date
  // directors data
  approvedBy        User?     @relation(name: "approvedBy", fields: [approverId], references: [id])
  approverId        String?
  approvedDate      DateTime? @db.Date
  // executors data
  orderedBy         User?     @relation(name: "orderedBy", fields: [orderedById], references: [id])
  orderedById       String?
  orderedDate       DateTime? @db.Date
  // warehouse data
  receivedBy        User?     @relation(name: "receivedBy", fields: [receivedById], references: [id])
  receivedById      String?
  receivedDate      DateTime? @db.Date
}

enum OrderStatus {
  CREATED
  APPROVED
  ORDERED
  RECEIVED
  CLOSED
}
